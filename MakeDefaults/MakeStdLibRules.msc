##############################################################
#
# Copyright 2011 EFDA | European Fusion Development Agreement
#
# Licensed under the EUPL, Version 1.1 or - as soon they 
# will be approved by the European Commission - subsequent  
# versions of the EUPL (the "Licence"); 
# You may not use this work except in compliance with the 
# Licence. 
# You may obtain a copy of the Licence at: 
#  
# http://ec.europa.eu/idabc/eupl
#
# Unless required by applicable law or agreed to in 
# writing, software distributed under the Licence is 
# distributed on an "AS IS" basis, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
# express or implied. 
# See the Licence for the specific language governing 
# permissions and limitations under the Licence. 
#
# $Id$
#
#############################################################

%_Gen.cpp : ../Generic/%_Generic.cpp
	cp ../Generic/$*_Generic.cpp $*_Gen.cpp

CreateLibrary :
	touch createLibrary

#In MSVC all the options can be given as forward slash or dash, they are equivalent
#-c Compile without linking
$(BUILD_DIR)/%.obj : %.cpp
	@echo "Building .objs"
	if not exist $(BUILD_DIR) mkdir $(BUILD_DIR)
	$(COMPILER) -c $(CFLAGS) $(CFLAGSPEC) $(DEBUG) $(OPTIM) $(INCLUDES) $*.cpp $(ASSEMBLER) -Fo$(BUILD_DIR)/$*.obj

$(BUILD_DIR)/%.obj : %.c
	@echo "Building .objs"
	if not exist $(BUILD_DIR) mkdir $(BUILD_DIR)
	$(COMPILER) -c /LD $(CFLAGS) $(CFLAGSPEC) $(DEBUG) $(OPTIM) $(INCLUDES) $*.c $(ASSEMBLER)  -Fo$(BUILD_DIR)/$*.obj

$(BUILD_DIR)/%.obj : %.f
	@if not exist temp mkdir temp
	@if not exist $(BUILD_DIR) mkdir $(BUILD_DIR) >temp/temp
	$(FCOMPILER) -compile_only $(FFLAGS) $(FOPTS) $*.f 
	@touch $(BUILD_DIR)/$*.obj >temp/temp
	@mv $*.obj $(BUILD_DIR) >temp/temp

$(BUILD_DIR)/%.pp :  %.cpp
	$(COMPILER) -E $(CFLAGS) $(CFLAGSPEC) $(DEBUG) $(OPTIM)  $*.cpp > $(BUILD_DIR)/$*.pp
	echo done

%.ifo :  %.h
	$(COMPILER) -E $(CFLAGS) $(CFLAGSPEC) $(DEBUG) $(OPTIM)  $*.h > temp/temp.pp
	cint  -i temp/temp.pp $(MAKEDEFAULTDIR)/MakeIfo.cxx $* > $*.ifo

%.sinfo.cpp :  %.h
	$(COMPILER) -D_CINT -E $(CFLAGS) $(CFLAGSPEC) $(DEBUG) $(OPTIM)  $*.h > temp/temp.pp
	cint.exe   -i  $(MAKEDEFAULTDIR)/MakeIfo.cxx $* > $*.sinfo.cpp
#-DINCL=temp/temp.pp

	
$(BUILD_DIR)/%.lib : $(OBJS)
	@echo "Building static .lib"
	lib $(OBJS) $(LIBRARIES_STATIC) /out:$@

$(BUILD_DIR)/%.dll : $(OBJS) $(LIBRARIES) $(IMPDEFS)
	@echo "Building dynamic link library .dll"
	if not exist $(BUILD_DIR)\dll mkdir $(BUILD_DIR)\dll
	if not exist .\tmpcl mkdir .\tmpcl
	@touch .\tmpcl\$(notdir $(@:%.dll=%.cpp))
	$(COMPILER) /EHsc /LD .\tmpcl\$(notdir $(@:%.dll=%.cpp)) $(OBJS) /link $(LIBRARIES) $(LIBRARIES_STATIC) $(LFLAGS) /wholearchive /force:multiple
	mv *.dll $(BUILD_DIR)\dll
	mv *.lib $(BUILD_DIR)\dll
	mv *.exp $(BUILD_DIR)\dll
	rmdir /q /s .\tmpcl

$(BUILD_DIR)/%.gam : $(OBJS) $(LIBRARIES) $(IMPDEFS)
	@echo "Building dynamic link library .dll"
	if not exist $(BUILD_DIR)\dll mkdir $(BUILD_DIR)\dll
	if not exist .\tmpcl mkdir .\tmpcl
	@touch .\tmpcl\$(notdir $(@:%.gam=%.cpp))
	$(COMPILER) /EHsc /LD .\tmpcl\$(notdir $(@:%.gam=%.cpp)) $(OBJS) /link $(LIBRARIES) $(LIBRARIES_STATIC) $(LFLAGS) /wholearchive /force:multiple
	mv *.dll $(BUILD_DIR)\dll
	mv *.lib $(BUILD_DIR)\dll
	mv *.exp $(BUILD_DIR)\dll
	rmdir /q /s .\tmpcl

$(BUILD_DIR)/dummy.dll : $(OBJS) $(LIBRARIES) $(IMPDEFS)
	@echo "UNUSED dummy.dll"

$(BUILD_DIR)/%.def : $(BUILD_DIR)/dummy.dll
	@echo "UNUSED .def"

$(BUILD_DIR)/%.exe : $(OBJS) $(BUILD_DIR)/%.obj $(LIBRARIES) createLibrary
	$(COMPILER) /Zi /EHsc $(OBJS) $(subst /,\,$(BUILD_DIR))\$*.obj $(subst /,\,$(LIBRARIES)) /link /opt:noref $(LFLAGS) /wholearchive /out:$@ /force:multiple

$(BUILD_DIR)/%.drv : $(BUILD_DIR)/%.obj $(OBJS)  $(LIBRARIES)  %.def
	$(COMPILER) $(LFLAGS) -LDd -Zi $(OBJS) $(BUILD_DIR)/$*.obj $(LIBRARIES) $*.def -o $@

depends.msc : dependsRaw.msc
	@echo "UNUSED depends.msc"

dependsRaw.msc: 
	@echo "UNUSED dependsRaw.msc"

$(BUILD_DIR)/%.gam : $(BUILD_DIR)/%.obj $(OBJS)  $(LIBRARIES)  %.def
	$(COMPILER)  $(LFLAGS) -LDd -Zi $(OBJS) $(BUILD_DIR)/$*.obj $(LIBRARIES) $*.def -o $@

%.spb : 
	$(MAKE) -C $* -f Makefile.$(TARGET)

%.spc : 
	$(MAKE) -C $* -f Makefile.$(TARGET) clean

clean ::  $(SUBPROJC)
	@if exist depends.* rm -f depends*
	@if exist $(BUILD_DIR)/*$(DLLEXT) rm -f $(BUILD_DIR)/*$(DLLEXT)	
	@if exist $(BUILD_DIR)/*$(EXEEXT) rm -f $(BUILD_DIR)/*$(EXEEXT)
	@if exist $(BUILD_DIR)/*$(LIBEXT) rm -f $(BUILD_DIR)/*$(LIBEXT)
	@if exist $(BUILD_DIR)/*$(GAMEXT) rm -f $(BUILD_DIR)/*$(GAMEXT)
	@if exist $(BUILD_DIR)/*$(DRVEXT) rm -f $(BUILD_DIR)/*$(DRVEXT)
	@if exist $(BUILD_DIR)/*$(ASMEXT) rm -f $(BUILD_DIR)/*$(ASMEXT)
	@if exist $(BUILD_DIR)/*$(GCNOEXT) rm -f $(BUILD_DIR)/*$(GCNOEXT)
	@if exist $(BUILD_DIR)/*$(GCDAEXT) rm -f $(BUILD_DIR)/*$(GCDAEXT)
	@if exist $(BUILD_DIR)/*$(ILKEXT) rm -f $(BUILD_DIR)/*$(ILKEXT)
	@if exist $(BUILD_DIR)/*$(PDBEXT) rm -f $(BUILD_DIR)/*$(PDBEXT)
	@if exist $(BUILD_DIR)/*$(DEFEXT) rm -f $(BUILD_DIR)/*$(DEFEXT)	
	@if exist $(BUILD_DIR)/*$(OBJEXT) rm -f $(BUILD_DIR)/*$(OBJEXT)
