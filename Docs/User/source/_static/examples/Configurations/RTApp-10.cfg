//To be used as backed example for the MARTe2-tools/Py/HttpMonitorPlotly.py (HttpMonitorPlotlyExample.json)
+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "../../../../../Resources/HTTP/"
    }
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR
            Mode = ExpectsReply
        }
    }
}
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "IDLE"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Function = "Start"
                Mode = ExpectsReply
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "IDLE"
            Timeout = 0
            +ChangeToRunMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "IDLE"
            Timeout = 0
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
}
$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 500
                    DataSource = Timer
                    Type = uint32
                }
                CycleTime = {
                    DataSource = Timings
                    Type = uint32
                    Alias = "Idle.Thread1_CycleTime"
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                CycleTime = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +GAMStatistics = {
            Class = StatisticsGAM
            StartCycleNumber = 10
            InputSignals = {
                CycleTime = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
            OutputSignals = {
                CycleTimeAvg = {
                    DataSource = DDB1
                    Type = uint32
                }
                CycleTimeStd = {
                    DataSource = DDB1
                    Type = uint32
                }
                CycleTimeMin = {
                    DataSource = DDB1
                    Type = uint32
                }
                CycleTimeMax = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +GAMHistogram = {
            Class = HistogramGAM
            BeginCycleNumber = 10
            InputSignals = {
                CycleTime = {
                    DataSource = DDB1
                    Type = uint32
                    MinLim = 1900
                    MaxLim = 2100
                }
            }
            OutputSignals = {
                CycleTimeHist = {
                    DataSource = DDB1
                    Type = uint32
                    NumberOfElements = 11
                    NumberOfDimensions = 1
                }
            }
        }
        +GAMWaveforms = {
            Class = ReferenceContainer
            +GAMWaveformSin1 = {
                Class = WaveformGAM::WaveformSin
                Amplitude = 10.0
                Frequency = 0.1
                Phase = 0.0
                Offset = 0.0
                InputSignals = {
                    Time = {
                        DataSource = "DDB1"
                        Type = uint32 
                    }
                }
                OutputSignals = {
                    WaveformSin1= {
                        DataSource = "DDB1"
                        Type = float32
                    }
                }
            }
            +GAMWaveformSin2 = {
                Class = WaveformGAM::WaveformSin
                Amplitude = 10.0
                Frequency = 0.05
                Phase = 0.0
                Offset = 0.0
                InputSignals = {
                    Time = {
                        DataSource = "DDB1"
                        Type = uint32 
                    }
                }
                OutputSignals = {
                    WaveformSin2 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                }
            }
            +GAMWaveformSquare1 = {
                Class = WaveformGAM::WaveformPointsDef
                Points = {0 0     10  10}
                Times =  {0 2.498 2.5 4.998}
                InputSignals = {
                    Time = {
                        DataSource = DDB1
                        Type = uint32 
                    }
                }
                OutputSignals = {
                    WaveformSquare1 = {
                        DataSource = DDB1
                        Type = float32
                    }
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            ExecutionMode = "RealTimeThread"            
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x2
                    Functions = {GAMTimer GAMStatistics GAMHistogram GAMWaveforms}
                }
            }
        }
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x2
                    Functions = {GAMTimer GAMStatistics GAMHistogram GAMWaveforms}
                }
            }
        }
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
